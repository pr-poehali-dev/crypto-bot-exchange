// –¢–∏–ø—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram WebApp
declare global {
  interface Window {
    Telegram: {
      WebApp: {
        ready: () => void;
        expand: () => void;
        close: () => void;
        initData: string;
        initDataUnsafe: {
          user?: {
            id: number;
            first_name: string;
            last_name?: string;
            username?: string;
          }
        };
        sendData: (data: string) => void;
        MainButton: {
          text: string;
          color: string;
          textColor: string;
          isVisible: boolean;
          isActive: boolean;
          show: () => void;
          hide: () => void;
          setText: (text: string) => void;
          onClick: (callback: () => void) => void;
          offClick: (callback: () => void) => void;
          enable: () => void;
          disable: () => void;
        };
        BackButton: {
          isVisible: boolean;
          show: () => void;
          hide: () => void;
          onClick: (callback: () => void) => void;
          offClick: (callback: () => void) => void;
        };
      }
    }
  }
}

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞: 8006898941:AAGBhIKsY2VE2LrJbMrfJoUT_ZRJQZQNAXE
export const BOT_TOKEN = "8006898941:AAGBhIKsY2VE2LrJbMrfJoUT_ZRJQZQNAXE";
export const BOT_USERNAME = "tapcoins_bot"; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞

// API URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
const API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

export const isTelegramWebApp = (): boolean => {
  return Boolean(window.Telegram?.WebApp);
};

export const getTelegramUser = () => {
  if (isTelegramWebApp()) {
    return window.Telegram.WebApp.initDataUnsafe?.user;
  }
  return null;
};

export const initTelegramWebApp = () => {
  if (isTelegramWebApp()) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();
  }
};

export const showTelegramMainButton = (text: string, onClick: () => void) => {
  if (isTelegramWebApp()) {
    const { MainButton } = window.Telegram.WebApp;
    MainButton.setText(text);
    MainButton.show();
    MainButton.onClick(onClick);
  }
};

export const hideTelegramMainButton = () => {
  if (isTelegramWebApp()) {
    window.Telegram.WebApp.MainButton.hide();
  }
};

export const sendDataToTelegramBot = (data: any) => {
  if (isTelegramWebApp()) {
    window.Telegram.WebApp.sendData(JSON.stringify(data));
  }
};

export const closeTelegramWebApp = () => {
  if (isTelegramWebApp()) {
    window.Telegram.WebApp.close();
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp –∏–∑ –±–æ—Ç–∞
export const getWebAppUrl = () => {
  return `https://t.me/${BOT_USERNAME}/app`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞ —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º WebApp
export const getBotStartLink = () => {
  return `https://t.me/${BOT_USERNAME}?start=webapp`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
export const sendMessageToUser = async (chatId: number, message: string) => {
  try {
    const response = await fetch(`${API_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });
    
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    return null;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
export const requestWithdrawal = async (userId: number, amount: number) => {
  const user = getTelegramUser();
  if (!user) return false;
  
  const message = `üîÑ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n` +
    `üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>${userId}</code>\n` +
    `üí∞ –°—É–º–º–∞: <b>${amount} ‚ÇΩ</b>\n\n` +
    `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`;
  
  try {
    await sendMessageToUser(userId, message);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã–≤–æ–¥–∞:', error);
    return false;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –±—É—Å—Ç–µ—Ä–∞
export const notifyBoosterPurchase = async (userId: number, boosterName: string, price: number) => {
  const message = `‚úÖ <b>–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!</b>\n\n` +
    `üöÄ –ë—É—Å—Ç–µ—Ä: <b>${boosterName}</b>\n` +
    `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${price} ‚ÇΩ</b>\n\n` +
    `–ë—É—Å—Ç–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!`;
  
  try {
    await sendMessageToUser(userId, message);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    return false;
  }
};
